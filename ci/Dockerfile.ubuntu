# Builds JayBeams inside a docker container.
#
#   Copyright 2017 Carlos O'Ryan
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#

# This Dockerfile requires docker 17 or higher, it uses an argument to set
# the base image version, which was not supported in early versions of docker.
ARG DISTRO_VERSION=16.04
FROM ubuntu:$DISTRO_VERSION
MAINTAINER "Carlos O'Ryan <coryan@users.noreply.github.com>"

RUN apt-get update && apt-get install -y \
      autoconf \
      automake \
      build-essential \
      ca-certificates \
      clang \
      clang-format \
      cmake \
      doxygen \
      findutils \
      g++ \
      gcc \
      git \
      golang \
      lcov \
      libboost-all-dev \
      libbz2-dev \
      libclang-dev \
      libclfft-dev \
      libfftw3-dev \
      libtool \
      libyaml-cpp-dev \
      llvm \
      lshw \
      make \
      ocl-icd-libopencl1 \
      ocl-icd-opencl-dev \
      opencl-headers \
      pkg-config \
      sudo \
      tar \
      time \
      unzip \
      wget \
      xz-utils \
      zlib1g-dev && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /var/tmp/build-pocl
RUN wget -q http://portablecl.org/downloads/pocl-0.14.tar.gz && \
    tar -zxf pocl-0.14.tar.gz && \
    (cd pocl-0.14 && cmake . && make && make install) && \
    /bin/rm -fr /var/tmp/build-pocl

WORKDIR /var/tmp/build-boost-compute
RUN wget -q https://github.com/boostorg/compute/archive/boost-1.62.0.tar.gz && \
    tar -xf boost-1.62.0.tar.gz && \
    (cd compute-boost-1.62.0 && \
      cmake . && make && make DESTDIR=staging install && \
      cp -r staging/usr/local/include/compute/boost/compute.hpp \
          /usr/include/boost/ && \
      cp -r staging/usr/local/include/compute/boost/compute/ \
          /usr/include/boost/) && \
    /bin/rm -fr /var/tmp/build-boost-compute

WORKDIR /var/tmp/build-grpc
RUN git clone --depth 10 --branch v1.6.x https://github.com/grpc/grpc.git && \
  (cd /var/tmp/build-grpc/grpc/ && \
    git submodule update --init && \
    make -j 2 && make install && \
    cd /var/tmp/build-grpc/grpc/third_party/protobuf && \
    make install) && \
  /bin/rm -fr /var/tmp/build-grpc

WORKDIR /var/tmp/install-etcd
RUN wget -q https://github.com/coreos/etcd/releases/download/v3.2.1/etcd-v3.2.1-linux-amd64.tar.gz && \
  tar -xf etcd-v3.2.1-linux-amd64.tar.gz && \
  cp etcd-v3.2.1-linux-amd64/etcd /usr/bin && \
  cp etcd-v3.2.1-linux-amd64/etcdctl /usr/bin && \
  /bin/rm -fr /var/tmp/install-etcd

# ... capture the arguments that control the build ...
ARG CXX=clang++
ARG CC=clang
ARG CMAKE_FLAGS=""
ARG BUILD_EXTRA=""
ARG NCPU=2

# ... capture the Travis job number, effectively this busts the cache
# in each build, which we want anyway ...
ARG TRAVIS_JOB_NUMBER=""
RUN echo Running build=${TRAVIS_JOB_NUMBER}

# ... copy the contents of the source code directory to the container ...
WORKDIR /var/tmp/build-jaybeams
COPY . /var/tmp/build-jaybeams/

# ... the version of CMake distributed with Ubuntu 16.04 is too old for the version of Beast we have.
# Annoyingly newer versions of Beast can use older versions of CMake, but they require newever versions of
# Boost.ASIO.  Patching here is a bad idea, but will let me test the rest and then I can change the Beast
# installation ...
RUN sed -i 's/VERSION 3.5.2/VERSION 3.5/' ext/Beast/CMakeLists.txt

# ... build inside a sub-directory, easier to copy the artifacts that way
WORKDIR /var/tmp/build-jaybeams/build
# ... run the configure / compile / test cycle ...
RUN cmake ${CMAKE_FLAGS} .. && make -j ${NCPU}
RUN make -j ${NCPU} test || ( cat Testing/Temporary/LastTest.log; exit 1 )

# ... verify that the install target works as expected ...
# TODO(coryan) - need to write a test for the installed files.
RUN make install

# ... verify that the Doxygen code generation works ...
WORKDIR /var/tmp/build-jaybeams
RUN doxygen doc/Doxyfile
