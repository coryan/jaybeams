/*!
@page setup Configuration Guide: Howto Setup your Workstation to Compile JayBeams

@section setup_intro Introduction

These are my notes on how to prepare your environment to build
JayBeams.  If you find a problem with the instructions, please submit
a patch for the instructions so I can fix the problem.

@section docker Setting up a Docker based Development Environment

Use any of the Dockerfiles found in the `docker/dev/*/Dockerfile` to
create an image with all the necessary tools, we will use Ubuntu
14.04 as an example, but all of them would work in a similar fashion.

We are going to call this image `jbdevub14.04`, you may want
to a shorter or longer name to suite your taste.
We assume that [docker](https://docker.com) is installed and configured
in your workstation.
We also assume the current user has enough privileges to
run the docker command, otherwise all such commands need to be
prefixed with `sudo`.

@code
git clone https://github.com/coryan/jaybeams.git
cd jaybeams
docker build -t jbdevub14.04 docker/dev/ubuntu14.04
@endcode

@subsection docker_build Building a Docker Image for Development

You could then run a shell within that image, download the Jaybeams
source code and compile it, in this case:

@code
docker run --rm -it jbdevub14.04 /bin/bash
@endcode

The following commands are executed inside the container, their
output is discarded once you leave the shell.

@code
git clone https://github.com/coryan/jaybeams.git
cd jaybeams
./bootstrap
./configure --with-boost-libdir=/usr/lib/x86_64-linux-gnu
make -j 4 check
@endcode

@subsection docker_mount Using the Working Directory in the Docker Container

Sometimes it is convenient to use the jaybeams working directory
inside the container, that allows you to test the same code with
multiple distributions and compilers before you push the data.
We provide a script that creates a docker image with a clone of your
USER and UID inside the container, and mounts your current working
copy as a volume.

To test it run:

@code
git clone https://github.com/coryan/jaybeams.git
cd jaybeams
./docker/dev/runvariant.sh docker/dev/ubuntu14.04
@endcode

That command will drop you into a shell inside the container for
Ubuntu 14.04 with all the necessary development tools and dependencies
pre-installed.  You can then use it as normal, for example:

@code
./docker/dev/runvariant.sh docker/dev/ubuntu14.04
@endcode

The following commands are executed inside the container, the
`/home/$USER/jaybeams` directory is shared with the host, any changes
are preserved after the shell exits.

@code
whoami
ls -l
./bootstrap
@endcode

In this example we compile and test in a `build` subdirectory, you
should onsider using a different build subdirectory for each
container, e.g. `mkdir ${HOSTNAME?} && cd ${HOSTNAME?}`

@code
mkdir build
cd build
../configure --with-boost-libdir=/usr/lib/x86_64-linux-gnu
make -j 4 check
@endcode

@subsection docker_test Testing Docker Development Images

From time to time you may need to modify or add a docker image, for example,
to add new dependencies, or because a new version of a distribution or
compiler has become available.  Each directory has a helper Dockerfile
that can be used to test if the image can be used for development.
For example, let's suppose you have modified the Fedora 23 Dockerfile
and want to test it, simply run:

@code
cat docker/dev/fedora23/Dockerfile{,.test} | docker build -
@endcode

@subsection docker_as_docs Using the Dockerfiles as Documentation

If you prefer not to use docker, the scripts are fairly easy to read.
Each `RUN` command is a step that you must follow manually.

@section fedora Fedora 23

We assume that you have superuser privileges in your workstation.  The
instructions were originally written for Fedora 23, I will try to make
them more generic over time.  Please submit patches to support other
systems.

@subsection fedora_install_tools Installing the Developement Tools

@code
sudo dnf install -y autoconf \
    autoconf-archive \
    automake \
    boost \
    boost-devel \
    clang \
    clinfo \
    cmake \
    doxygen \
    fftw-devel \
    findutils \
    gcc-c++ \
    git \
    make \
    ocl-icd-devel \
    opencl-headers \
    patch \
    pocl-devel \
    tar \
    wget \
    yaml-cpp-devel
@endcode

The `autoconf-archive` distributed with Fedora 23 triggers a bug in
clang++ when determining if it supports C++11, to work around this
problem you can patch the macros:

@code
cd /var/tmp
git clone --depth 2 https://github.com/coryan/jaybeams.git
cd /var/tmp/jaybeams
patch -d / -p0 < m4/ax_cxx_compile_stdcxx.m4.patch
@endcode

@subsection fedora_install_libraries Installing Additional Libraries

<b>clFFT (FFT library for OpenCL)</b>

@code
wget -q https://github.com/clMathLibraries/clFFT/archive/v2.12.2.tar.gz
tar -xf v2.12.2.tar.gz
cd clFFT-2.12.2/src
cmake -DCMAKE_INSTALL_PREFIX:PATH=/usr/local/clFFT-2.12.2 .
make
sudo make install
cd ..

# ... use this to avoid settint LD_LIBRARY_PATH everywhere ...
echo /usr/local/clFFT-2.12.2/lib64 | sudo tee /etc/ld.so.conf.d/clfft-2.12.2.conf
sudo ldconfig
@endcode

<b>Download and install Boost.Compute</b>

@code
wget -q https://github.com/boostorg/compute/archive/boost-1.62.0.tar.gz
tar -xf boost-1.62.0.tar.gz
cd compute-boost-1.62.0
cmake . && make && make DESTDIR=staging install
sudo cp -r staging/usr/local/include/compute/boost/compute.hpp /usr/include/boost/
sudo cp -r staging/usr/local/include/compute/boost/compute/ /usr/include/boost/
@endcode

@subsection fedora_build Checkout the Code and Build

This is the easy part:

@code
git clone https://github.com/coryan/jaybeams.git
cd jaybeams
./bootstrap
./configure
make
@endcode

To compile and run the test use the `check` make target:

@code
make check
@endcode

Optionally, consider building in a subdirectory, for example if you
want to test with llvm:

@code
./bootstrap
mkdir clang
cd clang
CXX=clang++ ../configure
make -j 4 check
@endcode

*/
